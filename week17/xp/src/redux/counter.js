// import { createSlice } from "@reduxjs/toolkit";

// export const counterSlice = createSlice({
//   name: "counter",
//   initialState: {
//     count: 0
//   },
//   reducers: {
//     increment: (state) => {
//       state.count += 1;
//     },
//     decrement: (state) => {
//       state.count -= 1;
//     },
//     incrementByAmount: (state, action) => {
//       state.count += action.payload;
//     }
//   }
// });

// // Action creators are generated for each case reducer function
// export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// export default counterSlice.reducer;


// excercise 2 

import { createSlice } from "@reduxjs/toolkit";

export const daySlice = createSlice({
  name: "day",
  initialState: {
    currentDay: "Monday",
    daysOfWeek: ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
  },
  reducers: {
    setNextDay: (state) => {
      const currentIndex = state.daysOfWeek.indexOf(state.currentDay);
      const nextIndex = (currentIndex + 1) % state.daysOfWeek.length;
      state.currentDay = state.daysOfWeek[nextIndex];
    },
    setPreviousDay: (state) => {
      const currentIndex = state.daysOfWeek.indexOf(state.currentDay);
      const previousIndex = (currentIndex - 1 + state.daysOfWeek.length) % state.daysOfWeek.length;
      state.currentDay = state.daysOfWeek[previousIndex];
    }
  }
});

// Action creators are generated for each case reducer function
export const { setNextDay, setPreviousDay } = daySlice.actions;

export default daySlice.reducer;





// The provided code uses @reduxjs/toolkit to create a Redux slice for managing the state of days of the week. 
// It defines a daySlice with initial state, action creators, and reducers. 
// Here's a step-by-step explanation of the code:

// import { createSlice } from "@reduxjs/toolkit";:
// This line imports the createSlice function from the @reduxjs/toolkit library. 
// The createSlice function simplifies the process of creating a Redux slice, which includes the state 
// and related actions and reducers.

// export const daySlice = createSlice({ ... });:
// This block of code uses the createSlice function to define a Redux slice called daySlice.

// name: "day": Sets the name of the slice to "day". This name is used to generate the action types.

// initialState: { currentDay: "Monday", daysOfWeek: 
// ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"] }:
// Sets the initial state of the daySlice. The initial state contains two properties:

// currentDay: Represents the current selected day of the week. It is initialized to "Monday".
// daysOfWeek: An array containing the names of the days of the week in order.
// reducers: { ... }:
// The reducers property defines the actions that can be dispatched to modify the state.
// setNextDay: This reducer is used to update the state when the "Next Day" action is dispatched. 
// It increments the currentDay to the next day of the week using the daysOfWeek array.

// setPreviousDay: This reducer is used to update the state when the "Previous Day" action is dispatched. 
// It decrements the currentDay to the previous day of the week using the daysOfWeek array.

// export const { setNextDay, setPreviousDay } = daySlice.actions;:
// The createSlice function generates action creators for each reducer defined in the reducers object. 
// These action creators can be used to dispatch the corresponding actions.

// export default daySlice.reducer;:
// This line exports the reducer function generated by the createSlice function. It is responsible for 
// handling the dispatched actions and updating the state based on the defined reducers.

// In summary, the provided code creates a Redux slice called daySlice to manage the state of days of the 
// week. It initializes the state with the current day set to "Monday" and provides actions 
// (setNextDay and setPreviousDay) to update the current day to the next or previous day in the 
// daysOfWeek array. The daySlice.reducer function handles these actions and updates the state accordingly.